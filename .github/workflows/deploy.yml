name: EC2 서버 배포

on:
  push:
    branches: [ main ]  # 메인 브랜치에 푸시될 때 워크플로우 실행
  workflow_dispatch:     # 수동으로 워크플로우 실행 가능

jobs:
  deploy:
    runs-on: ubuntu-latest  # 워크플로우 실행 환경

    steps:
    - name: 1. 프로젝트 저장소 코드 가져오기 (checkout)
      uses: actions/checkout@v3  # 저장소 코드 체크아웃

    - name: 2. SSH 설정
      run: |
        # SSH 설정
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key

        # SSH 호스트 키 검증 스킵 (첫 접속 시 필요)
        echo -e "Host ${{ secrets.EC2_HOST }}\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

    - name: 3. EC2 서버 디스크 공간 확보
      run: |
        # SSH로 접속하여 디스크 공간 확인 및 정리
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i ~/.ssh/ec2_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          echo "===== 디스크 공간 확인 (정리 전) ====="
          df -h | grep -v tmpfs

          echo "===== 도커 리소스 정리 시작 ====="

          # 중지된 컨테이너 정리
          echo "중지된 컨테이너 정리 중..."
          docker container prune -f

          # 현재 실행 중인 이미지와 관련 없는 댕글링(dangling) 이미지만 정리
          echo "댕글링 이미지 정리 중..."
          docker image prune -f

          # 30일 이상 사용하지 않은 볼륨 정리
          echo "오래된 볼륨 정리 중..."
          docker volume prune -f

          # 사용하지 않는 네트워크 정리
          echo "사용하지 않는 네트워크 정리 중..."
          docker network prune -f

          # bg-remover 관련 오래된 이미지 정리 (최신 3개 유지)
          echo "이전 버전 이미지 정리 중..."
          docker images | grep "bg-remover" | sort -k2 -r | tail -n +4 | awk '\''{print $3}'\'' | xargs -r docker rmi

          echo "===== 도커 리소스 정리 완료 ====="

          # 정리 후 디스크 공간 확인
          echo "===== 디스크 공간 확인 (정리 후) ====="
          df -h | grep -v tmpfs
        '

    - name: 4. AWS EC2 배포
      run: |
        # 애플리케이션 파일 복사
        rsync -avz --exclude='.git/' --exclude='.github/' --exclude='models/' --exclude='static/' -e "ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i ~/.ssh/ec2_key" ./ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/background-remover/

        # SSH로 접속하여 배포 스크립트 실행
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i ~/.ssh/ec2_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          cd ~/background-remover &&
          echo "배포 작업을 시작합니다..." &&

          # 모델 및 static 디렉토리 생성 (없는 경우)
          mkdir -p models static/images logs &&

          # Docker Buildx 설치 (없는 경우)
          echo "Docker Buildx 설치 확인 및 설치..."
          if ! docker buildx version &> /dev/null; then
            echo "Docker Buildx 설치 중..."
            mkdir -p ~/.docker/cli-plugins

            # 최신 Docker Buildx 플러그인 다운로드
            BUILDX_URL=$(curl -s https://api.github.com/repos/docker/buildx/releases/latest | grep "browser_download_url.*linux-amd64" | cut -d : -f 2,3 | tr -d \")
            curl -L "${BUILDX_URL}" -o ~/.docker/cli-plugins/docker-buildx
            chmod +x ~/.docker/cli-plugins/docker-buildx

            # 설치 확인
            docker buildx version

            # Buildx 빌더 생성 및 사용 설정
            docker buildx create --name mybuilder --use
            docker buildx inspect --bootstrap
          else
            echo "Docker Buildx가 이미 설치되어 있습니다."
            docker buildx version
          fi

          # 환경 변수 설정 및 확인
          echo "EC2_HOST=${{ secrets.EC2_HOST }}" > .env
          echo "EC2_PORT=${{ secrets.EC2_PORT }}" >> .env
          echo "DOCKER_BUILDKIT=1" >> .env
          echo "환경 변수 파일 확인:"
          cat .env

          # Docker 이미지 빌드 및 실행
          export DOCKER_BUILDKIT=1
          docker-compose -f docker-compose-prod.yml down &&
          docker-compose -f docker-compose-prod.yml build --no-cache &&
          docker-compose -f docker-compose-prod.yml up -d &&

          echo "배포가 완료되었습니다!"
        '

    - name: 5. 배포 확인
      id: verify
      run: |
        echo "도커 컨테이너 상태 확인 중..."
        
        # 컨테이너 상태 확인 및 결과 저장
        CONTAINER_STATUS=$(ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i ~/.ssh/ec2_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          if docker ps | grep -q bg-remover; then
            echo "container_up"
          else
            echo "container_down"
          fi
        ')
        
        if [ "$CONTAINER_STATUS" = "container_up" ]; then
          echo "도커 컨테이너가 실행 중입니다."
          
          # Mattermost에 컨테이너 실행 알림 전송
          curl -X POST -H 'Content-Type: application/json' --data '{
            "text": "### 📢 배포 상태 업데이트\n**저장소:** ${{ github.repository }}\n**브랜치:** ${{ github.ref_name }}\n✅ FastAPI 도커 컨테이너가 실행되었습니다. 서버를 초기화 중입니다..."
          }' ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          
          # Uvicorn 실행 로그 확인
          echo "서버 초기화 완료 여부 확인 중... (최대 2분 대기)"
          SERVER_READY="false"
          MAX_ATTEMPTS=12  # 10초 간격으로 12번 체크 (2분)
          
          for ((i=1; i<=MAX_ATTEMPTS; i++)); do
            echo "확인 시도 $i/$MAX_ATTEMPTS..."
            SERVER_LOG=$(ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i ~/.ssh/ec2_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
              docker logs bg-remover 2>&1 | grep -c "Uvicorn running on" || echo "0"
            ')
            
            if [ "$SERVER_LOG" -gt "0" ]; then
              SERVER_READY="true"
              break
            fi
            
            # 10초 대기 후 다시 확인
            sleep 10
          done
          
          if [ "$SERVER_READY" = "true" ]; then
            echo "::set-output name=status::success"
            echo "✅ 서버가 성공적으로 초기화되었습니다."
            
            # Mattermost에 서버 초기화 완료 알림 전송
            curl -X POST -H 'Content-Type: application/json' --data '{
              "text": "### 📢 배포 상태 업데이트\n**저장소:** ${{ github.repository }}\n**브랜치:** ${{ github.ref_name }}\n🎉 서버가 시작되었습니다. 배포가 완료되었습니다!\n**접속 URL:** http://${{ secrets.EC2_HOST }}:${{ secrets.EC2_PORT }}"
            }' ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          else
            echo "::set-output name=status::pending"
            echo "⚠️ 도커 컨테이너는 실행 중이나 서버 초기화가 감지되지 않았습니다."
            
            # 컨테이너 로그 확인
            ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i ~/.ssh/ec2_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
              echo "컨테이너 로그 (마지막 30줄):"
              docker logs --tail 30 bg-remover
            '
          fi
        else
          echo "::set-output name=status::failure"
          echo "❌ 도커 컨테이너가 실행되지 않았습니다."
          
          # 도커 컨테이너 문제 확인
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -i ~/.ssh/ec2_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "도커 컨테이너 상태:"
            docker ps -a | grep bg-remover
            
            echo "도커 컨테이너 로그 (마지막 30줄):"
            docker logs --tail 30 bg-remover 2>&1 || echo "로그를 가져올 수 없습니다."
            
            echo "도커 컴포즈 로그:"
            cd ~/background-remover && docker-compose -f docker-compose-prod.yml logs
          '
        fi

    # 배포 결과 Mattermost로 전송 (최종 요약)
    - name: 6. 결과 알림 전송
      if: always()
      run: |
        if [ "${{ steps.verify.outputs.status }}" = "success" ]; then
          STATUS="✅ 성공"
          EMOJI="🎉"
          MESSAGE="배포가 성공적으로 완료되었습니다."
        elif [ "${{ steps.verify.outputs.status }}" = "pending" ]; then
          STATUS="⚠️ 진행 중"
          EMOJI="⏳"
          MESSAGE="도커 컨테이너가 실행 중이나, 서버 초기화가 아직 완료되지 않았습니다. 수동으로 확인해주세요."
        else
          STATUS="❌ 실패"
          EMOJI="⚠️"
          MESSAGE="배포 중 문제가 발생했습니다. 로그를 확인해주세요."
        fi

        curl -X POST -H 'Content-Type: application/json' --data '{
          "text": "### 📢 배포 최종 결과: '"$STATUS"'\n**저장소:** ${{ github.repository }}\n**브랜치:** ${{ github.ref_name }}\n**커밋:** ${{ github.sha }}\n**메시지:** ${{ github.event.head_commit.message }}\n**실행자:** ${{ github.actor }}\n**상태:** '"$STATUS $EMOJI"'\n**내용:** '"$MESSAGE"'\n**배포 링크:** [GitHub Actions 실행 결과](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        }' ${{ secrets.MATTERMOST_WEBHOOK_URL }}